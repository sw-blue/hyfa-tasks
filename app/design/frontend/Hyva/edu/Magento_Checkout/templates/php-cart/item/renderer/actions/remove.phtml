<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Checkout\Block\Cart\Item\Renderer\Actions\Remove;
use Magento\Framework\Escaper;

/** @var Remove $block */
/** @var ViewModelRegistry $viewModels */
/** @var Escaper $escaper */

/** @var HeroiconsSolid $heroicons */
$heroicons = $viewModels->require(HeroiconsSolid::class);
$item = $block->getItem();

if ($item->getProductType() === 'configurable') {
    $productOptions = $item->getProduct()->getTypeInstance()->getOrderOptions($item->getProduct());
    $productName = $productOptions["simple_name"];
} else {
    $productName = $item->getName();
}
?>
<!--@click.prevent='hyva.postForm(--><?php //= /* @noEscape */ $block->getDeletePostJson() ?><!--)'-->
<button
    @click.prevent="removeItem('<?= $escaper->escapeJs($block->getDeletePostJson()) ?>', '<?= $escaper->escapeHtmlAttr($productName) ?>')"
    x-data="{}"
    aria-label="<?= $escaper->escapeHtmlAttr(__('Remove %1', $productName)) ?>"
    type="button"
    class="flex action action-delete"
>
    <?= $heroicons->trashHtml('w-6 h-6', 24, 24, ['aria-hidden' => 'true']) ?>
</button>

<script>
    function removeItem(deletePostDataJson, productName) {
        let deletePostData;
        try {
            deletePostData = JSON.parse(deletePostDataJson);
        } catch (e) {
            console.error('Error parsing deletePostData:', e);
            window.dispatchMessages([{
                type: 'error',
                text: 'Internal error occurred. Please try again later.'
            }], 5000);
            return;
        }

        fetch(deletePostData.action, {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            body: new URLSearchParams({
                form_key: hyva.getFormKey(),
                id: deletePostData.data.id,
                uenc: deletePostData.data.uenc
            }),
            method: "POST",
            mode: "cors",
            credentials: "include",
        })
            .then(response => {
                const contentType = response.headers.get('content-type');
                if (response.redirected) {
                    // Handle redirection
                    // window.location.href = response.url;
                    return;
                } else if (response.ok && contentType && contentType.includes('application/json')) {
                    return response.json();
                } else if (contentType && contentType.includes('text/html')) {
                    return response.text().then(html => {
                        console.error('Unexpected HTML response:', html);
                        throw new Error('Received HTML response instead of JSON');
                    });
                } else {
                    throw new Error('Unexpected response from the server');
                }
            })
            .then(data => {
                console.log('data', data);

                const linkElement = document.querySelector(`a[title="${productName}"]`);
                if (linkElement) {
                    const tbodyElement = linkElement.closest('tbody');
                    if (tbodyElement) {
                        tbodyElement.remove();
                    }
                }

                window.dispatchMessages([{
                    type: 'success',
                    text: `Successfully removed ${productName}`
                }], 5000);
            })
            .catch(error => {
                console.error('Fetch error:', error);
                window.dispatchMessages([{
                    type: 'error',
                    text: error.message || 'Error removing item'
                }], 5000);
            });
    }


</script>

